<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记一次docker默认目录迁移</title>
    <link href="/2024/06/24/%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/"/>
    <url>/2024/06/24/%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<p>前提背景：在某个生产环境下的数据服务器装了docker，在加载了镜像并启了几个实例后，磁盘空间报警了。。因为原本系统挂载的磁盘很小，另外挂载了数据盘，docker的默认数据目录在&#x2F;var&#x2F;lib&#x2F;docker下，当前磁盘空间占了97%。现在就想着把这个默认目录迁移到数据盘中去。</p><h3 id="迁移准备"><a href="#迁移准备" class="headerlink" title="迁移准备"></a>迁移准备</h3><p>Google后，大多数提及的就是备份<code>/var/lib/docker</code>到新目录，再在<strong>docker.service</strong>中追加执行参数<code>--graph=/data/docker</code>（早期版本） 或<code>--data-root=/data/docker</code>（较新版本），再重启就ok了。另外一种就是将原本的数据目录复制到新目录，再以<strong>超链</strong>的方式来访问， 好处就是不用动启动文件了。本文采用了第二种方式。下面给出几个方案的链接:</p><ul><li><a href="https://blog.csdn.net/qq_29176323/article/details/120859260">docker 迁移 &#x2F;var&#x2F;lib&#x2F;docker 挂载到新的磁盘分区</a></li><li><a href="https://www.cnblogs.com/hengdin/articles/17526459.html">docker 迁移 &#x2F;var&#x2F;lib&#x2F;docker（解决 &#x2F;var&#x2F;lib&#x2F;docker 占用大 &#x2F; 根目录空间占满问题）</a></li><li><a href="https://juejin.cn/post/6971681223189987336">Docker容器目录迁移</a></li></ul><h3 id="测试尝试"><a href="#测试尝试" class="headerlink" title="测试尝试"></a>测试尝试</h3><h4 id="迁移插曲"><a href="#迁移插曲" class="headerlink" title="迁移插曲"></a>迁移插曲</h4><p>这里有个插曲简单提及一下，在测试环境docker已经运行了很久，中间我升级了glibc版本，导致在将docker停掉之后怎么也启动不了，执行<code>docker version</code>也只有客户端的信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> version<br><span class="hljs-attribute">Client</span>: Docker Engine - Community<br> <span class="hljs-attribute">Version</span>:           <span class="hljs-number">20</span>.<span class="hljs-number">10</span>.<span class="hljs-number">3</span><br> <span class="hljs-attribute">API</span> version:       <span class="hljs-number">1</span>.<span class="hljs-number">41</span><br> <span class="hljs-attribute">Go</span> version:        go1.<span class="hljs-number">13</span>.<span class="hljs-number">15</span><br> <span class="hljs-attribute">Git</span> commit:        <span class="hljs-number">48</span>d30b5<br> <span class="hljs-attribute">Built</span>:             Fri Jan <span class="hljs-number">29</span> <span class="hljs-number">14</span>:<span class="hljs-number">34</span>:<span class="hljs-number">14</span> <span class="hljs-number">2021</span><br> <span class="hljs-attribute">OS</span>/Arch:           linux/amd64<br> <span class="hljs-attribute">Context</span>:           default<br> <span class="hljs-attribute">Experimental</span>:      true<br><span class="hljs-attribute">Cannot</span> connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?<br></code></pre></td></tr></table></figure><p>大体就是docker.sock起不了了，卸载了重装也还是不行，后面重启了服务器后就正常了。这里也没明白是什么原因，提及glibc版本是因为执行 journalctl -xe 有提到glibc的信息</p><h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker版本</span><br>docker version<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker数据目录</span><br>docker info | grep &#x27;Root Dir&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看启动状态</span><br>systemctl status docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止docker服务</span><br>systemctl stop docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制备份</span><br>cp -a /var/lib/docker /data/docker<br>mv /var/lib/docker /var/lib/docker_bak<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建软链</span><br>ln -s /data/docker /var/lib/docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><img src="/2024/06/24/%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/docker1.png" class="" title="查看版本及目录"><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>这里使用了<code>docker info | grep &#39;Root Dir&#39;</code>来查看docker的数据目录会发现，使用超链的方式实际还是能看出docker指向了<code>/data/docker</code></p><img src="/2024/06/24/%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/docker2.png" class="" title="迁移操作">]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>数据迁移</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git配置http/https代理</title>
    <link href="/2024/06/19/git%E9%85%8D%E7%BD%AEhttp-https%E4%BB%A3%E7%90%86/"/>
    <url>/2024/06/19/git%E9%85%8D%E7%BD%AEhttp-https%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="查看代理"><a href="#查看代理" class="headerlink" title="查看代理"></a>查看代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --get http.proxy<br>git config --global --get https.proxy<br></code></pre></td></tr></table></figure><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global http.proxy 127.0.0.1:7890<br>git config --global https.proxy 127.0.0.1:7890<br></code></pre></td></tr></table></figure><h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --unset http.proxy<br>git config --global --unset https.proxy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jar包部署Linux的启动脚本</title>
    <link href="/2024/04/01/jar%E5%8C%85%E9%83%A8%E7%BD%B2Linux%E7%9A%84%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
    <url>/2024/04/01/jar%E5%8C%85%E9%83%A8%E7%BD%B2Linux%E7%9A%84%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>单独jar包放在服务器执行时，出现更新或需要重启情况下使用脚本来处理。把服务jar包放<strong>同名</strong>目录下，再新建脚本文件<code>touch startup.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">接收第一个命令行参数作为项目名称</span><br>project_name=$1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用<span class="hljs-built_in">readlink</span> -f 和 <span class="hljs-built_in">dirname</span> 获取当前脚本的绝对路径，并提取其所在目录作为base_dir</span><br>base_dir=$(dirname &quot;$(readlink -f &quot;$0&quot;)&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在base_dir目录下查找以.jar结尾、同时确保路径中包含项目名称</span><br>jar_path=$(find &quot;$base_dir&quot; -name &#x27;*.jar&#x27; | grep &quot;$base_dir/$project_name&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过jps列出所有Java进程，筛选出属于当前项目但排除jps自身的进程ID</span><br>to_kill=$(jps -l | grep -v Jps | grep &quot;$base_dir/$project_name&quot; | awk &#x27;&#123;print $1&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查是否有需要终止的旧进程</span><br>if [ -n &quot;$to_kill&quot; ]; then<br>    # 输出信息提示即将停止旧的应用实例<br>    echo &quot;Stopping existing application instances...&quot;<br>    # 使用xargs传递进程ID给kill命令，终止这些进程<br>    echo &quot;$to_kill&quot; | xargs kill -9<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据项目名称创建日志文件名，位于base_dir目录下</span><br>log_file=&quot;$base_dir/$&#123;project_name&#125;.log&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用<span class="hljs-built_in">nohup</span>启动新的Java应用实例，使其在后台持续运行</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置JVM堆内存初始和最大值为1GB，时区为GMT+8</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将标准输出和错误输出都重定向到上述定义的日志文件中</span><br>nohup java -jar -Xms1g -Xmx1g -Duser.timezone=GMT+8 &quot;$jar_path&quot; &gt;&gt; &quot;$log_file&quot; 2&gt;&amp;1 &amp;<br>echo &quot;Starting success!&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">脚本正常结束，返回码0表示成功</span><br>exit 0<br></code></pre></td></tr></table></figure><p>执行命令<code>chmod +x startup.sh</code> 赋予执行权限<br><br/>执行命令<code>./startup.sh 项目名</code> 来启动&#x2F;重启服务</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jar</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用nvm管理node版本</title>
    <link href="/2024/01/18/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/"/>
    <url>/2024/01/18/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p><a href="https://nvm.uihtm.com/download.html">nvm</a> 是一个管理 <strong>node</strong> 版本的工具，可以安装多个 <strong>node</strong> 版本，在不同项目切换时非常好用。</p><p>给出一些常用nvm命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看nvm版本信息</span><br>nvm version<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>nvm -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前安装的node版本列表</span><br>nvm list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前node版本信息</span><br>nvm current<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装node版本</span><br>nvm install 16.13.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换node版本</span><br>nvm use 16.13.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载node版本</span><br>nvm uninstall 16.13.0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nvm</tag>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置启用SSL</title>
    <link href="/2023/03/20/nginx%E9%85%8D%E7%BD%AE%E5%90%AF%E7%94%A8SSL/"/>
    <url>/2023/03/20/nginx%E9%85%8D%E7%BD%AE%E5%90%AF%E7%94%A8SSL/</url>
    
    <content type="html"><![CDATA[<p>当前环境下<br>CentOS版本：<code>7.6+</code><br>Nginx版本：<code>1.24.0</code></p><h2 id="nginx首次安装添加SSL"><a href="#nginx首次安装添加SSL" class="headerlink" title="nginx首次安装添加SSL"></a>nginx首次安装添加SSL</h2><p>在首次安装nginx时，执行.&#x2F;configure 后续添加 –with-http_ssl_module</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加ssl_module</span><br>./configure --with-http_stub_status_module --with-http_ssl_module<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译</span><br>./make<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>./make install<br></code></pre></td></tr></table></figure><h2 id="nginx已安装下添加SSL"><a href="#nginx已安装下添加SSL" class="headerlink" title="nginx已安装下添加SSL"></a>nginx已安装下添加SSL</h2><p>如果在首次没有添加SSL在nginx.conf中配置ssl证书启用https，在重启时会抛出下面报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx: [emerg] the &quot;ssl&quot; parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf:37<br></code></pre></td></tr></table></figure><p>此时，需要手动再配置添加上SSL模块，首先切换路径到nginx最初解压目录，例如下载解压路径是<code>/opt/nginx/nginx-1.24.0</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /opt/nginx/nginx-1.24.0/<br></code></pre></td></tr></table></figure><p>第一次安装后的路径基本都是在<code>/usr/local/nginx</code>,在当前目录下执行,等待执行完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module<br></code></pre></td></tr></table></figure><p>当前路径下执行make进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./make<br></code></pre></td></tr></table></figure><p>备份后再覆盖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak<br>cp objs/nginx /usr/local/nginx/sbin/<br></code></pre></td></tr></table></figure><p>再执行<code>nginx</code>启动，ssl配置就可用了</p>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>ssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jar包制作成windows服务</title>
    <link href="/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>在一些情况下，部署的服务器不一定是linux，在windows上如果在dos窗口执行jar包，会出现卡屏、误关闭等异常情况发生，所以更友好的方式是将jar包制作成windows服务。</p><h3 id="下载WinSW"><a href="#下载WinSW" class="headerlink" title="下载WinSW"></a>下载WinSW</h3><p>这里我们借用<a href="https://github.com/winsw/winsw/releases">WinSW</a>来将jar包制作成windows服务，这个是开源而且配置非常简单。一般下载<code>WinSW-x64.exe </code>就可以了</p><img src="/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/WinSW%E4%B8%8B%E8%BD%BD%E9%A1%B5.png" class="" title="下载页面"><h3 id="WinSW配置文件"><a href="#WinSW配置文件" class="headerlink" title="WinSW配置文件"></a>WinSW配置文件</h3><p>新建一个xml文件，与配置中服务名同名，例如MyJarService.xml 配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- ID of the service. It should be unique accross the Windows system--&gt;</span><br>  <span class="hljs-comment">&lt;!-- 服务的唯一标识符，需要在Windows系统中保持唯一--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>MyJarService<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Display name of the service --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 服务的显示名称 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>MyJarService<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Service description --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 服务的描述信息 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>jar包做成的windows服务<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- Path to the executable, which should be started --&gt;</span><br>    <span class="hljs-comment">&lt;!--当前电脑配置了java环境变量，直接写成“java”就行；你也可以写成类似这样：C:\openjdk\jdk-11.0.2\bin\java--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">executable</span>&gt;</span>C:\openjdk\jdk-11.0.2\bin\java<span class="hljs-tag">&lt;/<span class="hljs-name">executable</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这里带上启动参数和jar包路径--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">arguments</span>&gt;</span>-jar -server -Xmx1g -Xms1g -Dfile.encoding=utf-8 -Dspring.profiles.active=uat C:\Service\app\MyJar.jar<span class="hljs-tag">&lt;/<span class="hljs-name">arguments</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    OPTION: onfailure</span><br><span class="hljs-comment">    Defines a sequence of actions, which should be performed if the managed executable fails.</span><br><span class="hljs-comment">    Supported actions: restart, reboot, none</span><br><span class="hljs-comment">    定义如果可执行文件失败时要执行的操作，这里是重启服务，并设置重启延迟时间</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">onfailure</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;restart&quot;</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;10 sec&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">onfailure</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;restart&quot;</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;20 sec&quot;</span>/&gt;</span><br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    OPTION: resetfailure</span><br><span class="hljs-comment">    Time, after which the Windows service resets the failure status.</span><br><span class="hljs-comment">    Default value: 1 day</span><br><span class="hljs-comment">    定义服务失败状态的重置时间</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">resetfailure</span>&gt;</span>1 hour<span class="hljs-tag">&lt;/<span class="hljs-name">resetfailure</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    OPTION: priority</span><br><span class="hljs-comment">    Desired process priority.</span><br><span class="hljs-comment">    Possible values: Normal, Idle, High, RealTime, BelowNormal, AboveNormal</span><br><span class="hljs-comment">    Default value: Normal</span><br><span class="hljs-comment">    设置服务的进程优先级</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">priority</span>&gt;</span>Normal<span class="hljs-tag">&lt;/<span class="hljs-name">priority</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    OPTION: stoptimeout</span><br><span class="hljs-comment">    Time to wait for the service to gracefully shutdown the executable before we forcibly kill it</span><br><span class="hljs-comment">    Default value: 15 seconds</span><br><span class="hljs-comment">    设置服务优雅关闭的超时时间</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">stoptimeout</span>&gt;</span>15 sec<span class="hljs-tag">&lt;/<span class="hljs-name">stoptimeout</span>&gt;</span><br>    <br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    OPTION: stopparentprocessfirst</span><br><span class="hljs-comment">    If set, WinSW will terminate the parent process before stopping the children.</span><br><span class="hljs-comment">    Default value: false</span><br><span class="hljs-comment">    设置是否在停止子进程之前先停止父进程</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">stopparentprocessfirst</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">stopparentprocessfirst</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      OPTION: startmode</span><br><span class="hljs-comment">      Defines start mode of the service.</span><br><span class="hljs-comment">      Supported modes: Automatic, Manual, Boot, System (latter ones are supported for driver services only)</span><br><span class="hljs-comment">      Default mode: Automatic</span><br><span class="hljs-comment">      设置服务的启动模式，这里是自动启动</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">startmode</span>&gt;</span>Automatic<span class="hljs-tag">&lt;/<span class="hljs-name">startmode</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定服务启动的最大等待时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">waithint</span>&gt;</span>15 sec<span class="hljs-tag">&lt;/<span class="hljs-name">waithint</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定服务休眠的时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sleeptime</span>&gt;</span>1 sec<span class="hljs-tag">&lt;/<span class="hljs-name">sleeptime</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置日志文件的路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logpath</span>&gt;</span>C:\Service\app\logs<span class="hljs-tag">&lt;/<span class="hljs-name">logpath</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置日志按大小滚动，超过大小则自动生成新的日志文件 最多保留15个 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">log</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;roll-by-size&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">sizeThreshold</span>&gt;</span>51200<span class="hljs-tag">&lt;/<span class="hljs-name">sizeThreshold</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">keepFiles</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">keepFiles</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">log</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将WinSW.exe复制到<code>C:\Service\app</code>目录下，与配置xml文件改成同名，按上述配置即<code>MyJarService.exe</code>。</p><img src="/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E7%9B%AE%E5%BD%95.png" class="" title="服务目录"><h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><p>当前目录下则有<code>MyJarService.xml</code>、<code>MyJarService.exe</code>和jar包<code>MyJar</code>，管理员权限打开命令行，切换到当前目录下执行<code>MyJarService.exe install</code>即可安装服务，在管理工具中查看服务，即可看到刚刚安装的服务。</p><img src="/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/%E5%AE%89%E8%A3%85%E9%A1%B5.png" class="" title="安装"><img src="/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E9%A1%B5.png" class="" title="服务"><p>如果需要卸载，则执行<code>MyJarService.exe uninstall</code>即可。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jar</tag>
      
      <tag>windows</tag>
      
      <tag>WinSW</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
