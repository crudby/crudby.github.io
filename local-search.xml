<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Excel导入及异常回写处理</title>
    <link href="/2024/07/10/Excel%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%BC%82%E5%B8%B8%E5%9B%9E%E5%86%99%E5%A4%84%E7%90%86/"/>
    <url>/2024/07/10/Excel%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%BC%82%E5%B8%B8%E5%9B%9E%E5%86%99%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>在做业务系统开发时候，经常会有导入导出excel的需求.本文基于EasyExcel对导入和异常数据回写（标注）做相关演示。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>实现<code>AnalysisEventListener</code>来做一些通用处理，后续的有需要异常回写的Listener使用<code>AbstractMarkListener</code>作为父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMarkListener</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 记录所有数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;T&gt; excelDataList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 记录所有标注</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Integer, List&lt;CommentMark&gt;&gt; excelCommentMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data data</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addExcelData</span><span class="hljs-params">(T data)</span> &#123;<br>        excelDataList.add(data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加标注</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> row     row</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> column  column</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> comment comment</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addExcelComment</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">int</span> column, String comment)</span> &#123;<br>        <span class="hljs-keyword">if</span> (excelCommentMap.containsKey(row)) &#123;<br>            List&lt;CommentMark&gt; excelCommentMarks = excelCommentMap.get(row);<br>            <span class="hljs-keyword">if</span> (excelCommentMarks.stream().noneMatch(item -&gt; column == item.getColumn())) &#123;<br>                excelCommentMarks.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CommentMark</span>(row, column, comment));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                excelCommentMarks.stream().filter(item -&gt; column == item.getColumn()).findFirst()<br>                        .ifPresent(commentMark -&gt; commentMark.setComment(commentMark.getComment() + <span class="hljs-string">&quot;\n&quot;</span> + comment));<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            List&lt;CommentMark&gt; excelCommentMarks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            excelCommentMarks.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CommentMark</span>(row, column, comment));<br>            excelCommentMap.put(row, excelCommentMarks);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否备注</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">marked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> !excelCommentMap.isEmpty();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>标注信息类<code>CommentMark</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommentMark</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 行号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> row;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 列号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> column;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标注信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String comment;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现<code>RowWriteHandler</code>的标注回写处理类<code>CommentWriteHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommentWriteHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RowWriteHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Integer, List&lt;CommentMark&gt;&gt; excelErrorMap;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CommentWriteHandler</span><span class="hljs-params">(Map&lt;Integer, List&lt;CommentMark&gt;&gt; excelErrorMap)</span> &#123;<br>        <span class="hljs-built_in">this</span>.excelErrorMap = excelErrorMap;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCellCommon</span><span class="hljs-params">(Sheet sheet, <span class="hljs-type">int</span> rowIndex, <span class="hljs-type">int</span> colIndex, String value)</span> &#123;<br>        <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> sheet.getWorkbook();<br>        <span class="hljs-type">CellStyle</span> <span class="hljs-variable">cellStyle</span> <span class="hljs-operator">=</span> workbook.createCellStyle();<br>        cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);<br>        cellStyle.setFillForegroundColor(IndexedColors.RED.getIndex());<br>        cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);<br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.getRow(rowIndex);<br>        <span class="hljs-keyword">if</span> (row == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.getCell(colIndex);<br>        <span class="hljs-keyword">if</span> (cell == <span class="hljs-literal">null</span>) &#123;<br>            cell = row.createCell(colIndex);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>            cell.removeCellComment();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Drawing&lt;?&gt; drawing = sheet.createDrawingPatriarch();<br>        <span class="hljs-type">CreationHelper</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> sheet.getWorkbook().getCreationHelper();<br>        <span class="hljs-type">ClientAnchor</span> <span class="hljs-variable">anchor</span> <span class="hljs-operator">=</span> factory.createClientAnchor();<br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row1</span> <span class="hljs-operator">=</span> sheet.getRow(anchor.getRow1());<br>        <span class="hljs-keyword">if</span> (row1 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Cell</span> <span class="hljs-variable">cell1</span> <span class="hljs-operator">=</span> row1.getCell(anchor.getCol1());<br>            <span class="hljs-keyword">if</span> (cell1 != <span class="hljs-literal">null</span>) &#123;<br>                cell1.removeCellComment();<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">Comment</span> <span class="hljs-variable">comment</span> <span class="hljs-operator">=</span> drawing.createCellComment(anchor);<br>        <span class="hljs-type">RichTextString</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> factory.createRichTextString(value);<br>        comment.setString(str);<br>        comment.setAuthor(<span class="hljs-string">&quot;SYSTEM&quot;</span>);<br>        cell.setCellComment(comment);<br>        cell.setCellStyle(cellStyle);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterRowDispose</span><span class="hljs-params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Integer relativeRowIndex, Boolean isHead)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isHead) &#123;<br>            <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> writeSheetHolder.getSheet();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">activeRowIndex</span> <span class="hljs-operator">=</span> row.getRowNum();<br>            <span class="hljs-keyword">if</span> (excelErrorMap.containsKey(activeRowIndex)) &#123;<br>                List&lt;CommentMark&gt; excelErrors = excelErrorMap.get(activeRowIndex);<br>                excelErrors.forEach(obj -&gt; setCellCommon(sheet, obj.getRow(), obj.getColumn(), obj.getComment()));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h3><p>上面的几个工具辅助类可以放common包，一般在业务实现的时候我习惯于在业务包里再新建个excel包来存放相关的类，这里主要会使用到两个：一个接收映射对象类、一个excel处理类；<br>这里给一个实际用到的demo，使用的导入模板如图</p><img src="/2024/07/10/Excel%E5%AF%BC%E5%85%A5%E5%8F%8A%E5%BC%82%E5%B8%B8%E5%9B%9E%E5%86%99%E5%A4%84%E7%90%86/%E5%AF%BC%E5%85%A5%E6%A8%A1%E6%9D%BF.png" class="" title="excel导入模板"><p>接收对象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectPointExcel</span> &#123;<br><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;*位号名称&quot;, index = 0)</span><br>    <span class="hljs-keyword">private</span> String pointName;<br><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;描述&quot;, index = 1)</span><br>    <span class="hljs-keyword">private</span> String remark;<br><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;*数据源&quot;, index = 2)</span><br>    <span class="hljs-keyword">private</span> String datasource;<br>    <span class="hljs-meta">@ExcelIgnore</span><br>    <span class="hljs-keyword">private</span> Long sourceId;<br><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;底层位号名称&quot;, index = 3)</span><br>    <span class="hljs-keyword">private</span> String pointCode;<br><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;单位&quot;, index = 4)</span><br>    <span class="hljs-keyword">private</span> String unit;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>excel读取处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectPointListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMarkListener</span>&lt;CollectPointExcel&gt; &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PREFIX_POINT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;COLLECT_POINT_&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PREFIX_ERROR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;COLLECT_POINT_ERROR_&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">SHEET_NO</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">HEAD_ROW_NO</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">CollectPointExcel</span> <span class="hljs-variable">nullObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CollectPointExcel</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Long&gt; datasourceMap;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; existPointNameSet;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;String&gt; uploadNames;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CollectPointListener</span><span class="hljs-params">(Map&lt;String, Long&gt; datasourceMap, Set&lt;String&gt; existPointNameSet)</span> &#123;<br>        <span class="hljs-built_in">this</span>.datasourceMap = datasourceMap;<br>        <span class="hljs-built_in">this</span>.existPointNameSet = existPointNameSet;<br>        <span class="hljs-built_in">this</span>.uploadNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(CollectPointExcel data, AnalysisContext context)</span> &#123;<br>        <span class="hljs-keyword">if</span> (Objects.equals(nullObj, data)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rowIndex</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getExcelDataList().size() + HEAD_ROW_NO;<br>        <span class="hljs-comment">// 位号名称</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pointName</span> <span class="hljs-operator">=</span> data.getPointName();<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(pointName)) &#123;<br>            <span class="hljs-built_in">this</span>.addExcelComment(rowIndex, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;位号名称不可为空&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (existPointNameSet.contains(pointName)) &#123;<br>                <span class="hljs-built_in">this</span>.addExcelComment(rowIndex, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;位号名称已存在&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (containsChinese(pointName)) &#123;<br>                <span class="hljs-built_in">this</span>.addExcelComment(rowIndex, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;位号名称不能包含中文&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (uploadNames.contains(pointName)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">preRowIndex</span> <span class="hljs-operator">=</span> uploadNames.indexOf(pointName) + HEAD_ROW_NO;<br>            <span class="hljs-built_in">this</span>.addExcelComment(preRowIndex, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;当前文档中重复出现+1&quot;</span>);<br>            <span class="hljs-built_in">this</span>.addExcelComment(rowIndex, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;与第&quot;</span> + preRowIndex + <span class="hljs-string">&quot;位号名称重复&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 数据源</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sourceName</span> <span class="hljs-operator">=</span> data.getDatasource();<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(sourceName)) &#123;<br>            <span class="hljs-built_in">this</span>.addExcelComment(rowIndex, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;数据源不可为空&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">sourceId</span> <span class="hljs-operator">=</span> datasourceMap.get(sourceName);<br>            <span class="hljs-keyword">if</span> (Objects.isNull(sourceId)) &#123;<br>                <span class="hljs-built_in">this</span>.addExcelComment(rowIndex, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;数据源不存在&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                data.setSourceId(sourceId);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 记录</span><br>        uploadNames.add(pointName);<br>        <span class="hljs-built_in">this</span>.addExcelData(data);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsChinese</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">return</span> str.matches(<span class="hljs-string">&quot;.*[\\u4E00-\\u9FA5]+.*&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext context)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口处理"><a href="#接口处理" class="headerlink" title="接口处理"></a>接口处理</h3><p>上面的类都准备好后就可以开始写接口了，相关包括四个：模板下载、导入校验、确认写入、异常回写。</p><h4 id="动态下拉框选项"><a href="#动态下拉框选项" class="headerlink" title="动态下拉框选项"></a>动态下拉框选项</h4><p>这里再补充一个动态数据下拉的处理 借鉴了这篇文章 <a href="https://blog.csdn.net/rjkkaikai/article/details/123448047">Easyexcel导出带下拉框选项excel模板（解决下拉框超50个的问题）</a><br>贴一下我使用的处理类<code>SelectSheetWriteHandler</code>,可以放到common包里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectSheetWriteHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SheetWriteHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Integer, List&lt;String&gt;&gt; selectMap;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> index;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] alphabet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[]&#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>,<br>            <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>&#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SelectSheetWriteHandler</span><span class="hljs-params">(Map&lt;Integer, List&lt;String&gt;&gt; selectMap)</span> &#123;<br>        <span class="hljs-built_in">this</span>.selectMap = selectMap;<br>        <span class="hljs-built_in">this</span>.index = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SelectSheetWriteHandler</span><span class="hljs-params">(<span class="hljs-type">int</span> index, Map&lt;Integer, List&lt;String&gt;&gt; selectMap)</span> &#123;<br>        <span class="hljs-built_in">this</span>.index = index;<br>        <span class="hljs-built_in">this</span>.selectMap = selectMap;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterSheetCreate</span><span class="hljs-params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;<br>        <span class="hljs-keyword">if</span> (selectMap == <span class="hljs-literal">null</span> || selectMap.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 需要设置下拉框的sheet页</span><br>        <span class="hljs-type">Sheet</span> <span class="hljs-variable">curSheet</span> <span class="hljs-operator">=</span> writeSheetHolder.getSheet();<br>        <span class="hljs-type">DataValidationHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> curSheet.getDataValidationHelper();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dictSheetName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;字典sheet&quot;</span>;<br><br>        <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> writeWorkbookHolder.getWorkbook();<br><br>        <span class="hljs-comment">// 数据字典的sheet页</span><br>        <span class="hljs-type">Sheet</span> <span class="hljs-variable">dictSheet</span> <span class="hljs-operator">=</span> workbook.createSheet(dictSheetName);<br>        <span class="hljs-comment">// 从下个工作簿开始隐藏，为了用户的友好性，将字典sheet隐藏掉</span><br>        <span class="hljs-comment">// 设置隐藏</span><br>        workbook.setSheetHidden(<span class="hljs-built_in">this</span>.index, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, List&lt;String&gt;&gt; entry : selectMap.entrySet()) &#123;<br>            <span class="hljs-comment">// 设置下拉单元格的首行、末行、首列、末列</span><br>            <span class="hljs-type">CellRangeAddressList</span> <span class="hljs-variable">rangeAddressList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellRangeAddressList</span>(<span class="hljs-number">1</span>, <span class="hljs-number">65533</span>, entry.getKey(), entry.getKey());<br>            <span class="hljs-type">int</span> <span class="hljs-variable">rowLen</span> <span class="hljs-operator">=</span> entry.getValue().size();<br>            <span class="hljs-comment">// 设置字典sheet页的值 每一列一个字典项</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; rowLen; i++) &#123;<br>                <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> dictSheet.getRow(i);<br>                <span class="hljs-keyword">if</span> (row == <span class="hljs-literal">null</span>) &#123;<br>                    row = dictSheet.createRow(i);<br>                &#125;<br>                row.createCell(entry.getKey()).setCellValue(entry.getValue().get(i));<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">excelColumn</span> <span class="hljs-operator">=</span> getExcelColumn(entry.getKey());<br>            <span class="hljs-comment">// 下拉框数据来源 eg:字典sheet!$B1:$B2</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">refers</span> <span class="hljs-operator">=</span> dictSheetName + <span class="hljs-string">&quot;!$&quot;</span> + excelColumn + <span class="hljs-string">&quot;$1:$&quot;</span> + excelColumn + <span class="hljs-string">&quot;$&quot;</span> + rowLen;<br>            <span class="hljs-comment">// 创建可被其他单元格引用的名称</span><br>            <span class="hljs-type">Name</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> workbook.createName();<br>            <span class="hljs-comment">// 设置名称的名字</span><br>            name.setNameName(<span class="hljs-string">&quot;dict&quot;</span> + entry.getKey());<br>            <span class="hljs-comment">// 设置公式</span><br>            name.setRefersToFormula(refers);<br>            <span class="hljs-comment">// 设置引用约束</span><br>            <span class="hljs-type">DataValidationConstraint</span> <span class="hljs-variable">constraint</span> <span class="hljs-operator">=</span> helper.createFormulaListConstraint(<span class="hljs-string">&quot;dict&quot;</span> + entry.getKey());<br>            <span class="hljs-comment">// 设置约束</span><br>            <span class="hljs-type">DataValidation</span> <span class="hljs-variable">validation</span> <span class="hljs-operator">=</span> helper.createValidation(constraint, rangeAddressList);<br>            <span class="hljs-keyword">if</span> (validation <span class="hljs-keyword">instanceof</span> HSSFDataValidation) &#123;<br>                validation.setSuppressDropDownArrow(<span class="hljs-literal">false</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                validation.setSuppressDropDownArrow(<span class="hljs-literal">true</span>);<br>                validation.setShowErrorBox(<span class="hljs-literal">true</span>);<br>            &#125;<br>            <span class="hljs-comment">// 阻止输入非下拉框的值</span><br>            validation.setErrorStyle(DataValidation.ErrorStyle.STOP);<br>            validation.createErrorBox(<span class="hljs-string">&quot;提示&quot;</span>, <span class="hljs-string">&quot;此值与单元格定义格式不一致！&quot;</span>);<br>            <span class="hljs-comment">// 添加下拉框约束</span><br>            writeSheetHolder.getSheet().addValidationData(validation);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将数字列转化成为字母列</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> num 数字列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 字母列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getExcelColumn</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> alphabet.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> num / len;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> num % len;<br>        <span class="hljs-keyword">if</span> (num &lt;= len) &#123;<br>            column = alphabet[num] + <span class="hljs-string">&quot;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            column = alphabet[first - <span class="hljs-number">1</span>] + <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (second == <span class="hljs-number">0</span>) &#123;<br>                column = column + alphabet[len];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                column = column + alphabet[second - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> column;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h4><p>这里补充一下，localCache是用的缓存，然后主要可以看一下实现不用关注业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导入模板下载</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;导入模板下载&quot;, notes = &quot;导入模板下载&quot;, httpMethod = &quot;GET&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/point/excel-template&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">varTemplate</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>        <span class="hljs-type">ClassPathResource</span> <span class="hljs-variable">classPathResource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;template/PointImportTemplate.xlsx&quot;</span>);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> classPathResource.getInputStream();<br>             <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream()) &#123;<br>            response.setContentType(<span class="hljs-string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);<br>            response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            response.setHeader(<span class="hljs-string">&quot;Content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename*=&quot;</span> + URLEncoder.encode(<span class="hljs-string">&quot;数据测点导入模板&quot;</span>, StandardCharsets.UTF_8) + <span class="hljs-string">&quot;.xlsx&quot;</span>);<br>            <span class="hljs-comment">// 创建</span><br>            <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> EasyExcel.write(outputStream)<br>                    .withTemplate(inputStream)<br>                    .inMemory(<span class="hljs-literal">true</span>)<br>                    .build();<br>            <span class="hljs-comment">// 数据源下拉</span><br>            List&lt;String&gt; dsSelectList = collectDatasourceService.list().stream().map(CollectDatasource::getSourceName).collect(Collectors.toList());<br>            Map&lt;Integer, List&lt;String&gt;&gt; selectMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            selectMap.put(<span class="hljs-number">2</span>, dsSelectList);<br>            <span class="hljs-comment">// 写入</span><br>            <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet()<br>                    .registerWriteHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SelectSheetWriteHandler</span>(selectMap))<br>                    .build();<br>            excelWriter.fill(List.of(), writeSheet);<br>            excelWriter.finish();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;模板下载失败&quot;</span>, e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(ResultCode.SYSTEM_ERROR.code, <span class="hljs-string">&quot;模板下载失败&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测点导入检测</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file 文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiImplicitParams(&#123;</span><br><span class="hljs-meta">            @ApiImplicitParam(paramType = &quot;form&quot;, dataType = &quot;file&quot;, name = &quot;file&quot;, value = &quot;文件&quot;, required = true)</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;测点导入检测&quot;, notes = &quot;测点导入检测&quot;, httpMethod = &quot;POST&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/point/import-check&quot;)</span><br>    <span class="hljs-keyword">public</span> HttpResult&lt;String&gt; <span class="hljs-title function_">importCheck</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;<br>        Set&lt;String&gt; pointNameSet = collectPointService.list().stream().map(CollectPoint::getPointName).collect(Collectors.toSet());<br>        Map&lt;String, Long&gt; dsMap = collectDatasourceService.list().stream().collect(Collectors.toMap(CollectDatasource::getSourceName, CollectDatasource::getId));<br>        <span class="hljs-type">CollectPointListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CollectPointListener</span>(dsMap, pointNameSet);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> file.getInputStream()) &#123;<br>            EasyExcel.read(is, CollectPointExcel.class, listener)<br>                    .sheet(CollectPointListener.SHEET_NO)<br>                    .headRowNumber(CollectPointListener.HEAD_ROW_NO)<br>                    .doRead();<br>            List&lt;CollectPointExcel&gt; dataList = listener.getExcelDataList();<br>            <span class="hljs-keyword">if</span> (dataList.isEmpty()) &#123;<br>                <span class="hljs-keyword">return</span> HttpResult.fail(ResultCode.BUSINESS_FAILED.code, <span class="hljs-string">&quot;未读取到测点数据&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 暂存等待</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">recordNo</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>            localCache.put(CollectPointListener.PREFIX_POINT + recordNo, dataList);<br>            <span class="hljs-keyword">if</span> (listener.marked()) &#123;<br>                Map&lt;Integer, List&lt;CommentMark&gt;&gt; excelCommentMap = listener.getExcelCommentMap();<br>                localCache.put(CollectPointListener.PREFIX_ERROR + recordNo, excelCommentMap);<br>                <span class="hljs-keyword">return</span> HttpResult.fail(ResultCode.BUSINESS_FAILED.code, <span class="hljs-string">&quot;测点数据校验异常&quot;</span>, recordNo);<br>            &#125;<br>            <span class="hljs-keyword">return</span> HttpResult.success(recordNo);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;测点数据导入异常&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> HttpResult.fail(ResultCode.BUSINESS_FAILED.code, <span class="hljs-string">&quot;导入异常, 请稍后再试&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导入数据测点确定</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> recordNo 记录号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiImplicitParams(&#123;</span><br><span class="hljs-meta">            @ApiImplicitParam(paramType = &quot;path&quot;, dataType = &quot;string&quot;, name = &quot;recordNo&quot;, value = &quot;记录号&quot;, required = true)</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;导入数据测点确定&quot;, notes = &quot;导入数据测点确定&quot;, httpMethod = &quot;POST&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/point/&#123;recordNo&#125;/import-save&quot;)</span><br>    <span class="hljs-keyword">public</span> HttpResult&lt;Boolean&gt; <span class="hljs-title function_">saveImport</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;recordNo&quot;)</span> String recordNo)</span> &#123;<br>        List&lt;CollectPointExcel&gt; dataList = localCache.get(CollectPointListener.PREFIX_POINT + recordNo);<br>        <span class="hljs-keyword">if</span> (dataList == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> HttpResult.fail(ResultCode.DATA_NOT_EXIST.code, <span class="hljs-string">&quot;数据已过期，请重新导入&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 清理缓存</span><br>        localCache.expireKey(CollectPointListener.PREFIX_POINT + recordNo);<br>        <span class="hljs-comment">// 再次检查</span><br>        List&lt;String&gt; pointNames = dataList.stream().map(CollectPointExcel::getPointName).collect(Collectors.toList());<br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> collectPointService.count(CollectPointTable.COLLECT_POINT.POINT_NAME.in(pointNames));<br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> HttpResult.fail(ResultCode.DATA_EXIST.code, <span class="hljs-string">&quot;保存失败！复测数据测点名称重复，请刷新后再试&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 保存</span><br>        collectPointService.saveBatch(BeanUtil.toList(dataList, CollectPoint.class));<br>        <span class="hljs-keyword">return</span> HttpResult.success(Boolean.TRUE);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导入异常数据回写</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> recordNo 记录号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 响应</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException ioe</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiImplicitParams(&#123;</span><br><span class="hljs-meta">            @ApiImplicitParam(paramType = &quot;path&quot;, dataType = &quot;string&quot;, name = &quot;recordNo&quot;, value = &quot;记录号&quot;, required = true)</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;导入异常数据回写&quot;, notes = &quot;导入异常数据回写&quot;, httpMethod = &quot;GET&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/point/&#123;recordNo&#125;/error-download&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">errorDownload</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;recordNo&quot;)</span> String recordNo, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Map&lt;Integer, List&lt;CommentMark&gt;&gt; excelCommentMap = localCache.get(CollectPointListener.PREFIX_ERROR + recordNo);<br>        List&lt;CollectPointExcel&gt; dataList = localCache.get(CollectPointListener.PREFIX_POINT + recordNo);<br>        <span class="hljs-keyword">if</span> (Objects.isNull(excelCommentMap) || Objects.isNull(dataList)) &#123;<br>            response.reset();<br>            response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>            response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            response.getWriter().println(JsonUtil.toJson(HttpResult.fail(<span class="hljs-string">&quot;错误文件已过期，请重新上传校验&quot;</span>)));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 异常标注处理器</span><br>        <span class="hljs-type">ClassPathResource</span> <span class="hljs-variable">classPathResource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;template/PointImportTemplate.xlsx&quot;</span>);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> classPathResource.getInputStream();<br>             <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream()) &#123;<br>            <span class="hljs-comment">// 设置响应头和文件名称</span><br>            response.setContentType(<span class="hljs-string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);<br>            response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;异常数据测点_&quot;</span> + TimeUtil.format(LocalDateTime.now());<br>            response.setHeader(<span class="hljs-string">&quot;Content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename*=&quot;</span> + URLEncoder.encode(fileName, StandardCharsets.UTF_8) + <span class="hljs-string">&quot;.xlsx&quot;</span>);<br>            <span class="hljs-comment">// 设置输出流和模板信息</span><br>            <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> EasyExcel.write(outputStream)<br>                    .withTemplate(inputStream)<br>                    .inMemory(Boolean.TRUE)<br>                    .build();<br>            <span class="hljs-comment">// 异常标注处理器</span><br>            <span class="hljs-type">CommentWriteHandler</span> <span class="hljs-variable">commentWriteHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommentWriteHandler</span>(excelCommentMap);<br>            <span class="hljs-comment">// 数据源下拉</span><br>            List&lt;String&gt; dsSelectList = collectDatasourceService.list().stream().map(CollectDatasource::getSourceName).collect(Collectors.toList());<br>            Map&lt;Integer, List&lt;String&gt;&gt; selectMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>            selectMap.put(<span class="hljs-number">2</span>, dsSelectList);<br>            <span class="hljs-comment">// 写入</span><br>            <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet()<br>                    .registerWriteHandler(commentWriteHandler)<br>                    .registerWriteHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SelectSheetWriteHandler</span>(selectMap))<br>                    .build();<br>            excelWriter.fill(dataList, writeSheet);<br>            excelWriter.finish();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;变量位号导入错误下载异常&quot;</span>, e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(ResultCode.SYSTEM_ERROR.getCode(), <span class="hljs-string">&quot;异常文件导出失败&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EasyExcel</tag>
      
      <tag>excel导入</tag>
      
      <tag>异常回写</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3+ts接口请求防抖</title>
    <link href="/2024/06/28/vue3-ts%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E9%98%B2%E6%8A%96/"/>
    <url>/2024/06/28/vue3-ts%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E9%98%B2%E6%8A%96/</url>
    
    <content type="html"><![CDATA[<p>在某些原因（网络、客户端或人为）下会导致同一个请求会发送多次，这个情形在前端来做处理的话可以针对接口请求来做防抖，即在多长范围的时间内的操作只处理最后一次。<br>这里使用的是<code>lodash</code> 库。前端开发环境为<code>node v18.20.2 + vue3 + ts</code></p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pnpm install --save lodash<br>pnpm install --save-dev @types/lodash<br></code></pre></td></tr></table></figure><h4 id="debounce使用"><a href="#debounce使用" class="headerlink" title="debounce使用"></a>debounce使用</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; debounce &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;<br><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SearchParams</span> &#123;<br>    <span class="hljs-attr">query</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">performSearch</span>(<span class="hljs-params">params: SearchParams</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; &#123;<br>    <span class="hljs-comment">// 模拟异步搜索逻辑</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Searching for &quot;<span class="hljs-subst">$&#123;params.query&#125;</span>&quot;`</span>);<br>    <span class="hljs-comment">// ...实际的搜索逻辑</span><br>&#125;<br><br><span class="hljs-comment">// 使用debounce包装performSearch函数，等待300毫秒后再执行</span><br><span class="hljs-keyword">const</span> debouncedSearch = <span class="hljs-title function_">debounce</span>(<span class="hljs-function">(<span class="hljs-params">params: SearchParams</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">performSearch</span>(params);<br>&#125;, <span class="hljs-number">300</span>);<br><br><span class="hljs-comment">// 假设这是用户输入触发的搜索函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">onSearchInputChange</span>(<span class="hljs-params">query: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-comment">// 当输入变化时，调用防抖后的搜索函数</span><br>    <span class="hljs-title function_">debouncedSearch</span>(&#123; query &#125;);<br>&#125;<br><br><span class="hljs-comment">// 示例调用</span><br><span class="hljs-title function_">onSearchInputChange</span>(<span class="hljs-string">&#x27;typescript&#x27;</span>);<br><span class="hljs-comment">// 在300毫秒内连续调用将不会立即执行performSearch，而是在最后一次调用后的300毫秒后执行</span><br></code></pre></td></tr></table></figure><p><code>lodash</code>库应该是一个工具集成库，还包括<strong>节流</strong>等等，可以百度看看其他简便用法。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue3</tag>
      
      <tag>ts</tag>
      
      <tag>接口防抖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次docker默认目录迁移</title>
    <link href="/2024/06/24/%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/"/>
    <url>/2024/06/24/%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<p>前提背景：在某个生产环境下的数据服务器装了docker，在加载了镜像并启了几个实例后，磁盘空间报警了。。因为原本系统挂载的磁盘很小，另外挂载了数据盘，docker的默认数据目录在&#x2F;var&#x2F;lib&#x2F;docker下，当前磁盘空间占了97%。现在就想着把这个默认目录迁移到数据盘中去。</p><h3 id="迁移准备"><a href="#迁移准备" class="headerlink" title="迁移准备"></a>迁移准备</h3><p>Google后，大多数提及的就是备份<code>/var/lib/docker</code>到新目录，再在<strong>docker.service</strong>中追加执行参数<code>--graph=/data/docker</code>（早期版本） 或<code>--data-root=/data/docker</code>（较新版本），再重启就ok了。另外一种就是将原本的数据目录复制到新目录，再以<strong>超链</strong>的方式来访问， 好处就是不用动启动文件了。本文采用了第二种方式。下面给出几个方案的链接:</p><ul><li><a href="https://blog.csdn.net/qq_29176323/article/details/120859260">docker 迁移 &#x2F;var&#x2F;lib&#x2F;docker 挂载到新的磁盘分区</a></li><li><a href="https://www.cnblogs.com/hengdin/articles/17526459.html">docker 迁移 &#x2F;var&#x2F;lib&#x2F;docker（解决 &#x2F;var&#x2F;lib&#x2F;docker 占用大 &#x2F; 根目录空间占满问题）</a></li><li><a href="https://juejin.cn/post/6971681223189987336">Docker容器目录迁移</a></li></ul><h3 id="测试尝试"><a href="#测试尝试" class="headerlink" title="测试尝试"></a>测试尝试</h3><h4 id="迁移插曲"><a href="#迁移插曲" class="headerlink" title="迁移插曲"></a>迁移插曲</h4><p>这里有个插曲简单提及一下，在测试环境docker已经运行了很久，中间我升级了glibc版本，导致在将docker停掉之后怎么也启动不了，执行<code>docker version</code>也只有客户端的信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> version<br><span class="hljs-attribute">Client</span>: Docker Engine - Community<br> <span class="hljs-attribute">Version</span>:           <span class="hljs-number">20</span>.<span class="hljs-number">10</span>.<span class="hljs-number">3</span><br> <span class="hljs-attribute">API</span> version:       <span class="hljs-number">1</span>.<span class="hljs-number">41</span><br> <span class="hljs-attribute">Go</span> version:        go1.<span class="hljs-number">13</span>.<span class="hljs-number">15</span><br> <span class="hljs-attribute">Git</span> commit:        <span class="hljs-number">48</span>d30b5<br> <span class="hljs-attribute">Built</span>:             Fri Jan <span class="hljs-number">29</span> <span class="hljs-number">14</span>:<span class="hljs-number">34</span>:<span class="hljs-number">14</span> <span class="hljs-number">2021</span><br> <span class="hljs-attribute">OS</span>/Arch:           linux/amd64<br> <span class="hljs-attribute">Context</span>:           default<br> <span class="hljs-attribute">Experimental</span>:      true<br><span class="hljs-attribute">Cannot</span> connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?<br></code></pre></td></tr></table></figure><p>大体就是docker.sock起不了了，卸载了重装也还是不行，后面重启了服务器后就正常了。这里也没明白是什么原因，提及glibc版本是因为执行 journalctl -xe 有提到glibc的信息</p><h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker版本</span><br>docker version<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker数据目录</span><br>docker info | grep &#x27;Root Dir&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看启动状态</span><br>systemctl status docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止docker服务</span><br>systemctl stop docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制备份</span><br>cp -a /var/lib/docker /data/docker<br>mv /var/lib/docker /var/lib/docker_bak<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建软链</span><br>ln -s /data/docker /var/lib/docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><img src="/2024/06/24/%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/docker1.png" class="" title="查看版本及目录"><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>这里使用了<code>docker info | grep &#39;Root Dir&#39;</code>来查看docker的数据目录会发现，使用超链的方式实际还是能看出docker指向了<code>/data/docker</code></p><img src="/2024/06/24/%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/docker2.png" class="" title="迁移操作">]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>数据迁移</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git配置http/https代理</title>
    <link href="/2024/06/19/git%E9%85%8D%E7%BD%AEhttp-https%E4%BB%A3%E7%90%86/"/>
    <url>/2024/06/19/git%E9%85%8D%E7%BD%AEhttp-https%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="查看代理"><a href="#查看代理" class="headerlink" title="查看代理"></a>查看代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --get http.proxy<br>git config --global --get https.proxy<br></code></pre></td></tr></table></figure><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global http.proxy 127.0.0.1:7890<br>git config --global https.proxy 127.0.0.1:7890<br></code></pre></td></tr></table></figure><h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --unset http.proxy<br>git config --global --unset https.proxy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jar包部署Linux的启动脚本</title>
    <link href="/2024/04/01/jar%E5%8C%85%E9%83%A8%E7%BD%B2Linux%E7%9A%84%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
    <url>/2024/04/01/jar%E5%8C%85%E9%83%A8%E7%BD%B2Linux%E7%9A%84%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>单独jar包放在服务器执行时，出现更新或需要重启情况下使用脚本来处理。把服务jar包放<strong>同名</strong>目录下，再新建脚本文件<code>touch startup.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">接收第一个命令行参数作为项目名称</span><br>project_name=$1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用<span class="hljs-built_in">readlink</span> -f 和 <span class="hljs-built_in">dirname</span> 获取当前脚本的绝对路径，并提取其所在目录作为base_dir</span><br>base_dir=$(dirname &quot;$(readlink -f &quot;$0&quot;)&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在base_dir目录下查找以.jar结尾、同时确保路径中包含项目名称</span><br>jar_path=$(find &quot;$base_dir&quot; -name &#x27;*.jar&#x27; | grep &quot;$base_dir/$project_name&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过jps列出所有Java进程，筛选出属于当前项目但排除jps自身的进程ID</span><br>to_kill=$(jps -l | grep -v Jps | grep &quot;$base_dir/$project_name&quot; | awk &#x27;&#123;print $1&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查是否有需要终止的旧进程</span><br>if [ -n &quot;$to_kill&quot; ]; then<br>    # 输出信息提示即将停止旧的应用实例<br>    echo &quot;Stopping existing application instances...&quot;<br>    # 使用xargs传递进程ID给kill命令，终止这些进程<br>    echo &quot;$to_kill&quot; | xargs kill -9<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据项目名称创建日志文件名，位于base_dir目录下</span><br>log_file=&quot;$base_dir/$&#123;project_name&#125;.log&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用<span class="hljs-built_in">nohup</span>启动新的Java应用实例，使其在后台持续运行</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置JVM堆内存初始和最大值为1GB，时区为GMT+8</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将标准输出和错误输出都重定向到上述定义的日志文件中</span><br>nohup java -jar -Xms1g -Xmx1g -Duser.timezone=GMT+8 &quot;$jar_path&quot; &gt;&gt; &quot;$log_file&quot; 2&gt;&amp;1 &amp;<br>echo &quot;Starting success!&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">脚本正常结束，返回码0表示成功</span><br>exit 0<br></code></pre></td></tr></table></figure><p>执行命令<code>chmod +x startup.sh</code> 赋予执行权限<br><br/>执行命令<code>./startup.sh 项目名</code> 来启动&#x2F;重启服务</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jar</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用nvm管理node版本</title>
    <link href="/2024/01/18/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/"/>
    <url>/2024/01/18/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p><a href="https://nvm.uihtm.com/download.html">nvm</a> 是一个管理 <strong>node</strong> 版本的工具，可以安装多个 <strong>node</strong> 版本，在不同项目切换时非常好用。</p><p>给出一些常用nvm命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看nvm版本信息</span><br>nvm version<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>nvm -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前安装的node版本列表</span><br>nvm list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前node版本信息</span><br>nvm current<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装node版本</span><br>nvm install 16.13.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换node版本</span><br>nvm use 16.13.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载node版本</span><br>nvm uninstall 16.13.0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nvm</tag>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置启用SSL</title>
    <link href="/2023/03/20/nginx%E9%85%8D%E7%BD%AE%E5%90%AF%E7%94%A8SSL/"/>
    <url>/2023/03/20/nginx%E9%85%8D%E7%BD%AE%E5%90%AF%E7%94%A8SSL/</url>
    
    <content type="html"><![CDATA[<p>当前环境下<br>CentOS版本：<code>7.6+</code><br>Nginx版本：<code>1.24.0</code></p><h2 id="nginx首次安装添加SSL"><a href="#nginx首次安装添加SSL" class="headerlink" title="nginx首次安装添加SSL"></a>nginx首次安装添加SSL</h2><p>在首次安装nginx时，执行.&#x2F;configure 后续添加 –with-http_ssl_module</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加ssl_module</span><br>./configure --with-http_stub_status_module --with-http_ssl_module<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译</span><br>./make<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>./make install<br></code></pre></td></tr></table></figure><h2 id="nginx已安装下添加SSL"><a href="#nginx已安装下添加SSL" class="headerlink" title="nginx已安装下添加SSL"></a>nginx已安装下添加SSL</h2><p>如果在首次没有添加SSL在nginx.conf中配置ssl证书启用https，在重启时会抛出下面报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx: [emerg] the &quot;ssl&quot; parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf:37<br></code></pre></td></tr></table></figure><p>此时，需要手动再配置添加上SSL模块，首先切换路径到nginx最初解压目录，例如下载解压路径是<code>/opt/nginx/nginx-1.24.0</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /opt/nginx/nginx-1.24.0/<br></code></pre></td></tr></table></figure><p>第一次安装后的路径基本都是在<code>/usr/local/nginx</code>,在当前目录下执行,等待执行完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module<br></code></pre></td></tr></table></figure><p>当前路径下执行make进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./make<br></code></pre></td></tr></table></figure><p>备份后再覆盖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak<br>cp objs/nginx /usr/local/nginx/sbin/<br></code></pre></td></tr></table></figure><p>再执行<code>nginx</code>启动，ssl配置就可用了</p>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>ssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jar包制作成windows服务</title>
    <link href="/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>在一些情况下，部署的服务器不一定是linux，在windows上如果在dos窗口执行jar包，会出现卡屏、误关闭等异常情况发生，所以更友好的方式是将jar包制作成windows服务。</p><h3 id="下载WinSW"><a href="#下载WinSW" class="headerlink" title="下载WinSW"></a>下载WinSW</h3><p>这里我们借用<a href="https://github.com/winsw/winsw/releases">WinSW</a>来将jar包制作成windows服务，这个是开源而且配置非常简单。一般下载<code>WinSW-x64.exe </code>就可以了</p><img src="/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/WinSW%E4%B8%8B%E8%BD%BD%E9%A1%B5.png" class="" title="下载页面"><h3 id="WinSW配置文件"><a href="#WinSW配置文件" class="headerlink" title="WinSW配置文件"></a>WinSW配置文件</h3><p>新建一个xml文件，与配置中服务名同名，例如MyJarService.xml 配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- ID of the service. It should be unique accross the Windows system--&gt;</span><br>  <span class="hljs-comment">&lt;!-- 服务的唯一标识符，需要在Windows系统中保持唯一--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>MyJarService<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Display name of the service --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 服务的显示名称 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>MyJarService<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Service description --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 服务的描述信息 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>jar包做成的windows服务<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- Path to the executable, which should be started --&gt;</span><br>    <span class="hljs-comment">&lt;!--当前电脑配置了java环境变量，直接写成“java”就行；你也可以写成类似这样：C:\openjdk\jdk-11.0.2\bin\java--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">executable</span>&gt;</span>C:\openjdk\jdk-11.0.2\bin\java<span class="hljs-tag">&lt;/<span class="hljs-name">executable</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这里带上启动参数和jar包路径--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">arguments</span>&gt;</span>-jar -server -Xmx1g -Xms1g -Dfile.encoding=utf-8 -Dspring.profiles.active=uat C:\Service\app\MyJar.jar<span class="hljs-tag">&lt;/<span class="hljs-name">arguments</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    OPTION: onfailure</span><br><span class="hljs-comment">    Defines a sequence of actions, which should be performed if the managed executable fails.</span><br><span class="hljs-comment">    Supported actions: restart, reboot, none</span><br><span class="hljs-comment">    定义如果可执行文件失败时要执行的操作，这里是重启服务，并设置重启延迟时间</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">onfailure</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;restart&quot;</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;10 sec&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">onfailure</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;restart&quot;</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;20 sec&quot;</span>/&gt;</span><br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    OPTION: resetfailure</span><br><span class="hljs-comment">    Time, after which the Windows service resets the failure status.</span><br><span class="hljs-comment">    Default value: 1 day</span><br><span class="hljs-comment">    定义服务失败状态的重置时间</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">resetfailure</span>&gt;</span>1 hour<span class="hljs-tag">&lt;/<span class="hljs-name">resetfailure</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    OPTION: priority</span><br><span class="hljs-comment">    Desired process priority.</span><br><span class="hljs-comment">    Possible values: Normal, Idle, High, RealTime, BelowNormal, AboveNormal</span><br><span class="hljs-comment">    Default value: Normal</span><br><span class="hljs-comment">    设置服务的进程优先级</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">priority</span>&gt;</span>Normal<span class="hljs-tag">&lt;/<span class="hljs-name">priority</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    OPTION: stoptimeout</span><br><span class="hljs-comment">    Time to wait for the service to gracefully shutdown the executable before we forcibly kill it</span><br><span class="hljs-comment">    Default value: 15 seconds</span><br><span class="hljs-comment">    设置服务优雅关闭的超时时间</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">stoptimeout</span>&gt;</span>15 sec<span class="hljs-tag">&lt;/<span class="hljs-name">stoptimeout</span>&gt;</span><br>    <br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    OPTION: stopparentprocessfirst</span><br><span class="hljs-comment">    If set, WinSW will terminate the parent process before stopping the children.</span><br><span class="hljs-comment">    Default value: false</span><br><span class="hljs-comment">    设置是否在停止子进程之前先停止父进程</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">stopparentprocessfirst</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">stopparentprocessfirst</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      OPTION: startmode</span><br><span class="hljs-comment">      Defines start mode of the service.</span><br><span class="hljs-comment">      Supported modes: Automatic, Manual, Boot, System (latter ones are supported for driver services only)</span><br><span class="hljs-comment">      Default mode: Automatic</span><br><span class="hljs-comment">      设置服务的启动模式，这里是自动启动</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">startmode</span>&gt;</span>Automatic<span class="hljs-tag">&lt;/<span class="hljs-name">startmode</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定服务启动的最大等待时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">waithint</span>&gt;</span>15 sec<span class="hljs-tag">&lt;/<span class="hljs-name">waithint</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定服务休眠的时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sleeptime</span>&gt;</span>1 sec<span class="hljs-tag">&lt;/<span class="hljs-name">sleeptime</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置日志文件的路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logpath</span>&gt;</span>C:\Service\app\logs<span class="hljs-tag">&lt;/<span class="hljs-name">logpath</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置日志按大小滚动，超过大小则自动生成新的日志文件 最多保留15个 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">log</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;roll-by-size&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">sizeThreshold</span>&gt;</span>51200<span class="hljs-tag">&lt;/<span class="hljs-name">sizeThreshold</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">keepFiles</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">keepFiles</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">log</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将WinSW.exe复制到<code>C:\Service\app</code>目录下，与配置xml文件改成同名，按上述配置即<code>MyJarService.exe</code>。</p><img src="/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E7%9B%AE%E5%BD%95.png" class="" title="服务目录"><h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><p>当前目录下则有<code>MyJarService.xml</code>、<code>MyJarService.exe</code>和jar包<code>MyJar</code>，管理员权限打开命令行，切换到当前目录下执行<code>MyJarService.exe install</code>即可安装服务，在管理工具中查看服务，即可看到刚刚安装的服务。</p><img src="/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/%E5%AE%89%E8%A3%85%E9%A1%B5.png" class="" title="安装"><img src="/2022/11/01/jar%E5%8C%85%E5%88%B6%E4%BD%9C%E6%88%90windows%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E9%A1%B5.png" class="" title="服务"><p>如果需要卸载，则执行<code>MyJarService.exe uninstall</code>即可。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jar</tag>
      
      <tag>windows</tag>
      
      <tag>WinSW</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
